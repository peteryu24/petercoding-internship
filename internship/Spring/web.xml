<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>egov.sample</display-name>
	
    <!--  필터 등록  -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<!--  *.do라는 요청이 들어오면 encodingFilter를 찾아서 해당 필터에 설정된 클래스를 메모리 상에 띄운다-->
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
    
	<filter>
	<!--  크로스 스크립팅 해킹기법을 사전에 막는 기능  -->
	<!--  <script>로 시작하는 코드를 전송시켜 해킹코드를 서버에서 실행시키는 기법  -->
		<filter-name>HTMLTagFilter</filter-name>
		<filter-class>egovframework.rte.ptl.mvc.filter.HTMLTagFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HTMLTagFilter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
    
    <!--  리스너 등록  -->
    <!--  서블릿과는 다르게 서블릿 컨테이너(tomcat)가 web.xml 파일을 읽어서 구동될 때 자동으로 메모리에 생성되는 갹체-->
	<context-param>
	<!--  지정하지 않으면 WEB-INF에 있는 applicationContext.xml을 자동으로 로딩-->
	<!--  해당 경로에 없다면 에러!!-->
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:egovframework/spring/context-*.xml</param-value>
	</context-param>
    
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 앞에서 listener가 pre-loading 되면서 business layer(service, DAO 등)가 메모르상에 올라 간 후 
	*.do 요청이 없어도 presentation layor(controller 등)가 메모리에 올라감 -->
    
    <!--  dispatcher-servlet 등록하기-->
	<servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
		<!--  DispatcherServlet클래스의 설정파일 경로 지정-->
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/egovframework/springmvc/dispatcher-servlet.xml</param-value>
		</init-param>
		<!--  load on startup이 없다면, *.do라는 요청이 들어올 때 action이라는 서블릿의 
		org.springframework.web.servlet.DispatcherServlet 클래스를 실행한다-->
		<load-on-startup>1</load-on-startup>
		<!--  하지만 세팅했기 때문에 요청이 들어오지 않아도 action이라는 서블릿을 실행한다-->
	</servlet>
    
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
    
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
    <!-- 보안된 페이지로 들어가려는 사용자에 대한 서버의 인증 방식 설정
    BASIC, DIGEST, CLIENT-CERT, FORM -->
	<login-config>
		<auth-method>BASIC</auth-method>
	</login-config>
    
    <!-- 에러 처리 부분 -->
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/common/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/common/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/common/error.jsp</location>
	</error-page>
    
</web-app>
